import telebot
from telebot import types
import requests
import json

# Инициализация бота с использованием токена
bot = telebot.TeleBot('6803479333:AAH-q47fG_ICMIKEfmAn-mtZZ2oi6al9mr0')

# Словарь для отслеживания состояния пользователя (какие кнопки ему показаны)
user_state = {}

# Функция для получения общих данных с внешнего ресурса
def get_general_data():
    try:
        response = requests.get('https://math-ege.sdamgia.ru/newapi/general')
        response.raise_for_status()  # Проверка статуса ответа
        parsedData = json.loads(response.content)
        return parsedData
    except Exception as e:
        bot.send_message(chat_id, f"Произошла ошибка при получении данных: {str(e)}")
        return None

# Обработчик команды /start
@bot.message_handler(commands=['start'])
def welcome(message):
    # Приветствие и описание бота
    welcome_text = """
    Привет! Я бот для работы с заданиями по математике ЕГЭ. Выбери интересующий раздел, чтобы начать.
    """
    
    # Клавиатура с кнопками
    layout = types.InlineKeyboardMarkup(
        [
            [
                types.InlineKeyboardButton('Начать', callback_data='start'),
            ],
        ]
    )
    
    # Отправка приветственного сообщения и клавиатуры
    msg = bot.send_message(message.chat.id, welcome_text, reply_markup=layout)

# Обработчик нажатий на кнопки
@bot.callback_query_handler(func=lambda callback: True)
def callback_handler(callback):
    chat_id = callback.message.chat.id
    
    if callback.data == 'start':
        # Отправка кнопок при нажатии "Начать"
        layout = types.InlineKeyboardMarkup(
            [
                [
                    types.InlineKeyboardButton('Темы', callback_data='themes'),
                    types.InlineKeyboardButton('Справка', callback_data='button2'),
                ],
            ]
        )
        user_state[chat_id] = 'start'
        bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='<b>Меню</b>', reply_markup=layout, parse_mode='html')
    elif callback.data == 'themes':
        # Отправка сообщения с темами и клавиатурой
        layout = types.InlineKeyboardMarkup(
            [
                [
                    types.InlineKeyboardButton('Тема 1', callback_data='theme1'),
                    types.InlineKeyboardButton('Тема 2', callback_data='theme2'),
                ],
                [
                    types.InlineKeyboardButton('Назад', callback_data='back'),
                ],
            ]
        )
        user_state[chat_id] = 'themes'
        bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='<b>Темы</b>', reply_markup=layout, parse_mode='html')
    elif callback.data == 'button2':
        # Отправка сообщения с инструкцией и кнопкой для перехода к темам
        instruction_text = """<b>Инструкция по использованию бота:</b>

1. Запуск бота:
   • Нажмите кнопку "Start" или другую команду, предложенную ботом для активации.

2. Ознакомьтесь с командами:
   • Большинство ботов поддерживают определенные команды. Например, "/help", "/info" или "/commands" для получения списка доступных команд.

3. Использование основных функций:
   • В зависимости от назначения бота, вы можете использовать различные команды для выполнения определенных задач. 
   Например, для получения погоды, вы можете ввести "/weather", а для перевода текста - "/translate"."""
        layout = types.InlineKeyboardMarkup(
            [
                [
                    types.InlineKeyboardButton('Перейти к темам', callback_data='themes'),
                ],
                [
                    types.InlineKeyboardButton('Назад', callback_data='back'),
                ],
            ]
        )
        user_state[chat_id] = 'button2'
        bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text=instruction_text, reply_markup=layout, parse_mode='html')
    elif callback.data == 'back':
        # Обработка кнопки "Назад"
        if chat_id in user_state and user_state[chat_id] == 'themes':
            layout = types.InlineKeyboardMarkup(
                [
                    [
                        types.InlineKeyboardButton('Темы', callback_data='themes'),
                        types.InlineKeyboardButton('Справка', callback_data='button2'),
                    ],
                ]
            )
            user_state[chat_id] = 'start'
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='<b>Меню</b>', reply_markup=layout, parse_mode='html')
        elif chat_id in user_state and user_state[chat_id] == 'button2':
            layout = types.InlineKeyboardMarkup(
                [
                    [
                        types.InlineKeyboardButton('Темы', callback_data='themes'),
                        types.InlineKeyboardButton('Справка', callback_data='button2'),
                    ],
                ]
            )
            user_state[chat_id] = 'start'
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='<b>Меню</b>', reply_markup=layout, parse_mode='html')
    else:
        # Отправка сообщения с разделами и клавиатурой
        url = 'https://math-ege.sdamgia.ru/test?theme=' + callback.data
        bot.send_message(chat_id, f'<b>{callback.data}</b>', parse_mode='html')
        bot.send_message(chat_id, f'<a href="{url}">Ссылка на сайт</a>', parse_mode='html', disable_web_page_preview=True)

# Функция для получения разделов по заданному номеру темы
def get_subtopics(issue):
    data = get_general_data()
    iterableData = data['constructor']
    element = list(filter(lambda item: item.get("issue") == issue, iterableData))
    return sorted(element[0]['subtopics'], key=lambda k: k['title'])

# Функция для создания клавиатуры с разделами
def create_subtopics_layout(issue):
    subtopics = get_subtopics(issue)
    layout = types.InlineKeyboardMarkup()
    for sub in subtopics:
        layout.add(types.InlineKeyboardButton(sub['title']+ ' ' + '(' +str(sub['amount'])+ ')', url='https://math-ege.sdamgia.ru/test?theme=' + str(sub['id'])))
    return layout # Функция для создания клавиатуры с темами

# Запуск бота в бесконечном цикле
bot.polling(none_stop=True)
